-- name: HiDivi
SELECT
    A.code,
    B.name,
    A.date last_price_date,
    A.close,
    B.divi,
    B.shares,
    B.report_year,
    TRUNCATE(B.divi / A.close * 10 * (1 - 0.18413),
        3) dps,
    C.pe,
    C.esp,
    C.bvps,
    C.pb,
    C.undp,
    C.rev,
    C.profit,
    C.gpr,
    C.npr,
    D.kdj_k k_d,
    E.kdj_k k_w,
    F.kdj_k k_m
FROM
    (SELECT
        *
    FROM
        kline_d
    INNER JOIN (SELECT
        code, MAX(date) date
    FROM
        kline_d
    GROUP BY code) AS kmax USING (code , date)) AS A,
    (SELECT
        *
    FROM
        (SELECT
        code,
            name,
            SUBSTR(report_date, 1, 4) AS report_year,
            SUM(divi) divi,
            SUM(shares) shares
    FROM
        `div`
    GROUP BY code , name , report_year) AS T1
    INNER JOIN (SELECT
        code, MAX(SUBSTR(report_date, 1, 4)) AS report_year
    FROM
        `div`
    GROUP BY code) AS T2 USING (code , report_year)) AS B,
    (SELECT
        code, pe, esp, bvps, pb, undp, rev, profit, gpr, npr
    FROM
        basics) AS C,
    (SELECT
        code, kdj_k
    FROM
        indicator_d
    INNER JOIN (SELECT
        code, MAX(date) date
    FROM
        indicator_d
    GROUP BY code) AS imaxd USING (code , date)) AS D,
    (SELECT
        code, kdj_k
    FROM
        indicator_w
    INNER JOIN (SELECT
        code, MAX(date) date
    FROM
        indicator_w
    GROUP BY code) AS imaxw USING (code , date)) AS E,
    (SELECT
        code, kdj_k
    FROM
        indicator_m
    INNER JOIN (SELECT
        code, MAX(date) date
    FROM
        indicator_m
    GROUP BY code) AS imaxm USING (code , date)) AS F
WHERE
    A.code = B.code AND A.code = C.code
        AND A.code = D.code and A.code = E.code and A.code = F.code
ORDER BY dps DESC
LIMIT ?

-- name: HID
SELECT
    x1.*
FROM
    (SELECT
            code,
            name,
            SUBSTR(board_date, 1, 4) AS year,
            ROUND(SUM(divi), 2) AS divi,
            SUM(dyr) AS dyr,
            SUM(dpr) AS dpr,
            SUM(shares_allot) AS shares_allot,
            SUM(shares_cvt) AS shares_cvt
    FROM
        xdxr
    GROUP BY code , name , year) x1
        INNER JOIN
    (SELECT
        code, MAX(SUBSTR(board_date, 1, 4)) AS year
    FROM
        xdxr
    GROUP BY code) x2 USING (code , year)
        INNER JOIN
    (SELECT 
        code
    FROM
        basics) b USING (code)
ORDER BY x1.dyr DESC

-- name: HID_SCOPED
SELECT
    x1.*
FROM
    (SELECT
            code,
            name,
            SUBSTR(board_date, 1, 4) AS year,
            ROUND(SUM(divi), 2) AS divi,
            SUM(dyr) AS dyr,
            SUM(dpr) AS dpr,
            SUM(shares_allot) AS shares_allot,
            SUM(shares_cvt) AS shares_cvt
    FROM
        xdxr
    WHERE code in (%s)
    GROUP BY code , name , year) x1
        INNER JOIN
    (SELECT
        code, MAX(SUBSTR(board_date, 1, 4)) AS year
    FROM
        xdxr
    GROUP BY code) x2 USING (code , year)
ORDER BY x1.dyr DESC

-- name: HID_HIST
SELECT
    code,
    name,
    SUBSTR(board_date, 1, 4) AS year,
    SUM(divi) AS divi,
    SUM(dyr) AS dyr,
    SUM(dpr) AS dpr,
    SUM(shares_allot) AS shares_allot,
    SUM(shares_cvt) AS shares_cvt
FROM
    xdxr
WHERE code = ?
    AND board_date is not null
GROUP BY code , name , year
ORDER BY year DESC

-- name: HID_XDXR_DATES
SELECT
    divi, reg_date, xdxr_date, progress
FROM
    xdxr
WHERE
    code = ?
        AND board_date LIKE concat(?,'%')
ORDER BY idx DESC

-- name: latestUFRXdxr
SELECT
    code,
    name,
    idx,
    divi,
    board_date,
    reg_date,
    xdxr_date,
    progress,
    xprice
FROM
    xdxr
        INNER JOIN
    (SELECT
        code, MAX(idx) idx
    FROM
        xdxr
    WHERE
        progress = '实施方案'
        AND code = ?
        AND xdxr_date <= CURRENT_DATE()
        AND (xprice <> 'Y' OR xprice IS NULL)
        AND idx > (SELECT
            COALESCE(MAX(idx), - 1) idx
        FROM
            xdxr
        WHERE
            code = ? AND xprice = 'Y')
    GROUP BY code) t USING (code , idx)

-- name: lastNTD
SELECT
    calendarDate
FROM
    tradecal
WHERE
    isOpen = 1
    AND calendarDate < DATE(NOW())
ORDER BY `index` DESC
LIMIT 1 OFFSET ?

-- name: backwardTD
SELECT
    calendarDate
FROM
    tradecal
WHERE
    isOpen = 1
    AND calendarDate < DATE(?)
ORDER BY `index` DESC
LIMIT 1 OFFSET ?

-- name: supKlid
SET @c := ?;
SELECT @vklid := CASE
         WHEN MAX(klid) IS NULL THEN -1
         ELSE MAX(klid)
     END
FROM
      (SELECT klid
       FROM kline_d
       WHERE code = @c) t;
update kline_d set klid = (@vklid := @vklid + 1) where code = @c and klid is null order by date

-- name: UPD_BASICS
UPDATE basics b
        INNER JOIN
    (SELECT
        f1.code, f1.eps
    FROM
        finance f1
    INNER JOIN (SELECT
        code, MAX(year) year
    FROM
        finance
    WHERE
        year LIKE '%%-12-31'
    GROUP BY code) f2 USING (code , year)) f USING (code)
        INNER JOIN
    (SELECT
        f1.code, f1.udpps, f1.ocfps
    FROM
        finance f1
    INNER JOIN (SELECT
        code, MAX(year) year
    FROM
        finance
    GROUP BY code) f2 USING (code , year)) fl USING (code)
        INNER JOIN
    (SELECT
        p1.code, p1.close
    FROM
        kline_d_f p1
    INNER JOIN (SELECT
        code, MAX(klid) klid
    FROM
        kline_d_f
    GROUP BY code) p2 USING (code , klid)) p USING (code)
SET
    b.pe = ROUND(p.close / f.eps, 2),
    b.po = ROUND(p.close / fl.ocfps, 2),
    b.pu = ROUND(p.close / fl.udpps, 2),
    b.udate = curdate(),
    b.utime = curtime()
WHERE b.code IN (%s)

-- name: BLUE
SELECT
    b.name, b.pe, b.pu, b.po, f.*
FROM
    basics b
        INNER JOIN
    (SELECT
        *
    FROM
        finance
    INNER JOIN (SELECT
        code, MAX(year) year
    FROM
        finance
    GROUP BY code) fi USING (code , year)) f USING (code)
WHERE
    b.pe IS NOT NULL AND b.pe > 0
ORDER BY pe ASC

-- name: BLUE_SCOPED
SELECT
    b.name, b.pe, b.pu, b.po, f.*
FROM
    basics b
        INNER JOIN
    (SELECT
        *
    FROM
        finance
    INNER JOIN (SELECT
        code, MAX(year) year
    FROM
        finance
    WHERE code in (%s)
    GROUP BY code) fi USING (code , year)) f USING (code)
WHERE
    b.pe IS NOT NULL AND b.pe > 0
ORDER BY pe ASC

-- name: BLUE_HIST
SELECT
    *
FROM
    finance
WHERE
    code = ?
ORDER BY year DESC

-- name: FIN_PREDICT
SELECT
    *
FROM
    fin_predict
WHERE
    code = ?
ORDER BY year ASC

-- name: UPD_XPRICE
UPDATE xdxr x
       INNER JOIN
    (SELECT
        code, MAX(xmx.idx) idx
    FROM
        xdxr xmx
    WHERE
        progress = '实施方案'
        AND xmx.xdxr_date <= CURRENT_DATE()
        AND (xmx.xprice <> 'Y' OR xmx.xprice IS NULL)
    GROUP BY xmx.code) t USING (code , idx)
        LEFT JOIN
    (SELECT
        code, MAX(idx) idxmn
    FROM
        xdxr
    WHERE
        xprice = 'Y'
    GROUP BY code) tmn USING (code)
SET
    x.xprice = 'Y'
WHERE
    x.code IN (%s)
        AND x.idx > COALESCE(tmn.idxmn, - 1)

-- name: KDJ_FEAT_DAT_RAW
SELECT
    f.code, f.fid, f.smp_date, f.smp_num, k.klid, k.k, k.d, k.j
FROM
    (SELECT
        *
    FROM
        kdj_feat_dat_raw
    WHERE
        fid LIKE ?) k
        INNER JOIN
    (SELECT
        *
    FROM
        indc_feat_raw
    WHERE
        indc = 'KDJ' AND cytp = ?
            AND bysl = ?
            AND smp_num = ?) f USING (code , fid)
ORDER BY k.code , k.fid , k.klid

-- name: KDJ_FEAT_DAT_RAW_UNPRUNED_COUNT
SELECT
    *
FROM
    (SELECT
        cytp, bysl, smp_num, COUNT(*) count
    FROM
        indc_feat_raw
    GROUP BY cytp , bysl , smp_num) r
WHERE
    NOT EXISTS( SELECT
            cytp, bysl, smp_num
        FROM
            indc_feat f
        WHERE
            f.cytp = r.cytp AND f.bysl = r.bysl
                AND f.smp_num = r.smp_num)
ORDER BY
    count

-- name: KDJ_FEAT_DAT
SELECT
    f.fid, f.smp_num, f.fd_num, f.weight, k.seq, k.k, k.d, k.j
FROM
    kdj_feat_dat k
        INNER JOIN
    (SELECT
        *
    FROM
        indc_feat
    WHERE
        indc = 'KDJ' AND cytp = ?
            AND bysl = ?
            AND smp_num = ?) f USING (fid)
ORDER BY k.fid, f.fd_num desc, k.seq

-- name: KDJ_FEAT_DAT_ALL
SELECT
    f.fid, f.bysl, f.cytp, f.smp_num, f.fd_num, f.weight, k.seq, k.k, k.d, k.j
FROM
    kdj_feat_dat k
        INNER JOIN
    (SELECT
        *
    FROM
        indc_feat
    WHERE
        indc = 'KDJ') f USING (fid)
ORDER BY f.cytp, f.bysl, f.smp_num, k.fid, f.fd_num desc, k.seq

-- name: KDJV_STATS_UNDONE
SELECT
    b.code
FROM
    ((SELECT
        code
    FROM
        basics) UNION (SELECT
        code
    FROM
        idxlst)) b
WHERE
    NOT EXISTS( SELECT
            ks.code
        FROM
            kdjv_stats ks
        WHERE
            ks.code = b.code)

-- name: DELETE_KLINE_AFTER_KLID
DELETE FROM %[1]s 
WHERE
    code = '%[2]s'
    AND klid IN (SELECT 
        *
    FROM
        (SELECT 
            klid
        FROM
            %[1]s
        WHERE
            code = '%[2]s' AND klid > %[3]d
        ORDER BY klid) AS X)

-- name: QUERY_NR_DAILY
SELECT 
    tn.code,
    tn.date,
    tn.klid,
    tn.open,
    tn.high,
    tn.close,
    tn.low,
    tn.volume,
    tn.amount,
    tn.xrate,
    tn.varate,
    t.varate_rgl,
    t.lr,
    tn.udate,
    tn.utime
FROM
    kline_d_n tn
        INNER JOIN
    kline_d t USING (code , klid)
WHERE
    tn.code = ?
    %s
ORDER BY tn.klid

-- name: QUERY_BWR_DAILY
SELECT 
    t.code,
    t.date,
    t.klid,
    t.open,
    t.high,
    t.close,
    t.low,
    t.volume,
    t.amount,
    t.xrate,
    t.varate,
    t.varate_rgl,
    t.lr,
    t.udate,
    t.utime
FROM
    kline_d_b t
WHERE
    t.code = ?
    %s
ORDER BY t.klid

-- name: RAND_KPTS_BY_INDUSTRY
SELECT 
    mt.*
FROM
    kpts%[1]d mt
        INNER JOIN
    (SELECT 
        code, MIN(klid) klid
    FROM
        kpts%[1]d
    GROUP BY code) mi USING (code , klid)
        INNER JOIN
    (SELECT 
        code
    FROM
        basics
    WHERE
        ind_lv3 = ?) b USING (code)
WHERE
    mt.flag IS NULL
    AND mt.code NOT IN (SELECT 
            code
        FROM
            kpts%[1]d
        WHERE
            flag IS NOT NULL)
ORDER BY RAND()
LIMIT ?

-- name: COUNT_KPTS_BY_FLAG
SELECT 
    COUNT(*)
FROM
    kpts%[1]d
        INNER JOIN
    (SELECT DISTINCT
        code
    FROM
        kpts%[1]d
    WHERE
        flag = ?) a USING (code)

-- name: COLLECT_STANDARDIZATION_STATS
INSERT INTO fs_stats (method, tab, fields, mean, std, udate, utime) 
SELECT 
    'standardization', '%[1]s', field, @col_avg := AVG(t1.col) col_avg, @col_std := STD(t1.col) col_std, 
    DATE_FORMAT(now(), '%%Y-%%m-%%d'), DATE_FORMAT(now(), '%%H:%%i:%%S')
FROM
    (SELECT 
        '%[2]s' field, %[2]s col
    FROM
        %[1]s) t1
ON DUPLICATE KEY UPDATE mean=@col_avg, std=@col_std, udate=DATE_FORMAT(now(), '%%Y-%%m-%%d'), utime=DATE_FORMAT(now(), '%%H:%%i:%%S')

-- name: QUERY_BWR_DAILY_4_XCORL_TRN
SELECT 
    t.code,
    t.date,
    t.klid,
    t.open,
    t.high,
    t.close,
    t.low,
    t.volume,
    t.amount,
    t.xrate,
    t.varate,
    t.varate_rgl,
    t.lr,
    t.udate,
    t.utime
FROM
    kline_d_b t
WHERE
    t.code IN (%s) AND t.date IN (%s)
ORDER BY code , klid

-- name: CORL_FEAT_QUERY_TMPL
SELECT
    date,
    %s
FROM
    kline_d_b d
        LEFT OUTER JOIN
    (SELECT
        ? code,
        t.method,
        %s
    FROM
        fs_stats t
    WHERE
        t.method = 'standardization'
    GROUP BY code, t.method) s USING (code) 
WHERE
    d.code = ?
    %s 
ORDER BY klid 
LIMIT ?